{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 .SFNS-Regular_wdth_opsz110000_GRAD_wght2580000;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red0\green0\blue0;
\red231\green231\blue237;\red39\green40\blue50;}
{\*\expandedcolortbl;;\csgray\c0\c0;\cssrgb\c0\c0\c0;\csgray\c0;
\cssrgb\c92549\c92549\c94510;\cssrgb\c20392\c20784\c25490;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid202\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh18400\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Dieser Code umfasst vier Endpunkte:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 POST /posts
\f0\fs32 : Empf\'e4ngt JSON-Daten und erstellt einen neuen Beitrag.\
\ls1\ilvl0
\f1\fs28 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 GET /posts/latest
\f0\fs32 : Ruft den neuesten Beitrag ab.\
\ls1\ilvl0
\f1\fs28 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 GET /posts/search
\f0\fs32 : Sucht nach Beitr\'e4gen anhand eines Benutzernamens oder Textinhalts.\
\ls1\ilvl0
\f1\fs28 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 GET /posts/<int:post_id>
\f0\fs32 : Ruft einen Beitrag anhand seiner einzigartigen ID ab.\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \cb1 \
\cf4 \cb2 \strokec3 Genauere Beschreibung: \
\
\pard\pardeftab720\partightenfactor0

\f2\b \strokec5 Create a meaningful REST API to:
\f0\b0 \
a. 
\f2\b Send the information for a post.
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 The 
\f1\fs28 POST /posts
\f0\fs32  endpoint is designed for this purpose. It allows the client to send information for a new post in JSON format. The server receives this data, processes it by calling 
\f1\fs28 insert_post(post_data)
\f0\fs32 , and responds with the new post ID if successful.\
\pard\pardeftab720\partightenfactor0
b. 
\f2\b Extract the information for a post.
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 You have two endpoints for extracting information:\
\ls3\ilvl1
\f1\fs28 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 GET /posts/latest
\f0\fs32  retrieves the latest post from the database.\
\ls3\ilvl1
\f1\fs28 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 GET /posts/<int:post_id>
\f0\fs32  retrieves a specific post by its unique ID.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 These endpoints allow clients to extract information for a post either by retrieving the latest one or by specifying a post ID.\
\pard\pardeftab720\partightenfactor0
c. 
\f2\b Functionality to search for posts.
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 The 
\f1\fs28 GET /posts/search
\f0\fs32  endpoint allows clients to search for posts by a 
\f1\fs28 user
\f0\fs32  or 
\f1\fs28 text
\f0\fs32  content. The server processes the search parameters and responds with a list of matching posts.\cf5 \cb6 \
\ls4\ilvl0\cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \cb2 \strokec3 \
\pard\pardeftab720\sa400\partightenfactor0
\cf0 Die Flask-Anwendung definiert eine REST-API mit den folgenden Eigenschaften:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Zustandslose Operationen: Jede HTTP-Anfrage des Clients enth\'e4lt alle Informationen, die der Server ben\'f6tigt, um die Anfrage zu verstehen und zu verarbeiten. Der Server muss keine Sitzungszustandsinformationen zwischen den Anfragen speichern.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Standard-HTTP-Methoden: Sie verwendet standardisierte HTTP-Methoden wie GET zum Abrufen von Daten und POST zum Erstellen neuer Ressourcen (in diesem Fall Posts).\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Klare Ressourcenidentifikation: Ressourcen (wie Beitr\'e4ge) werden in Anfragen mit URIs (Uniform Resource Identifiers) identifiziert. Zum Beispiel wird /latest_post verwendet, um den neuesten Beitrag zu erhalten, und /posts/search f\'fcr die Suche durch Beitr\'e4ge.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Verwendung von HTTP-Antwortcodes: Die API verwendet standardisierte HTTP-Antwortcodes, um den Erfolg oder Misserfolg von Anfragen anzuzeigen. Beispielsweise gibt sie 201 zur\'fcck f\'fcr eine Ressource, die erfolgreich erstellt wurde, 200 f\'fcr eine erfolgreiche Abholung, 404, wenn eine Ressource nicht gefunden wird, und 500 f\'fcr einen Serverfehler.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Inhaltliche Aushandlung: Clients und Server k\'f6nnen Daten in verschiedenen Formaten austauschen, wie z.B. JSON. Der Content-Type-Header in HTTP-Anfragen und -Antworten gibt das Format der gesendeten oder erwarteten Daten an.\
\pard\pardeftab720\partightenfactor0
\cf0 \strokec3 Die Anwendungsrouten (/posts, /latest_post, /posts/search) sind typisch f\'fcr einen RESTful-Service und bieten eine einfache und vorhersehbare Reihe von Endpunkten f\'fcr die Interaktion mit dem Server. Das hier verwendete Datenaustauschformat ist JSON, das in REST-APIs aufgrund seiner Einfachheit und Lesbarkeit h\'e4ufig verwendet wird.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\sa400\partightenfactor0
\cf0 Das Einbeziehen der ID-Suche in denselben Endpunkt wie die text- oder userbasierte Suche k\'f6nnte aus mehreren Gr\'fcnden problematisch sein:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Ressourcenidentifizierung
\f0\b0 : In REST APIs repr\'e4sentiert eine URL mit einer ID \'fcblicherweise eine spezifische Ressource. Die Suche nach einer ID ist eine direkte Abfrage nach einer eindeutigen Ressource, w\'e4hrend eine text- oder userbasierte Suche eher eine Sammlung von Ressourcen zur\'fcckgibt, die ein Kriterium erf\'fcllen. Diese Operationen sind grundlegend verschieden und sollten entsprechend getrennt werden.\
\ls6\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Route Definition
\f0\b0 : Die routenspezifische Logik in Flask und vielen anderen Webframeworks unterscheidet zwischen Pfadparametern (wie einer ID in 
\f1\fs28 /posts/<int:post_id>
\f0\fs32 ) und Abfrageparametern (wie einem User oder Text in 
\f1\fs28 /posts/search?user=username&text=searchtext
\f0\fs32 ). Diese Unterscheidung hilft dabei, klare und lesbare API-Endpunkte zu erstellen.\
\ls6\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 HTTP-Methoden und REST-Konventionen
\f0\b0 : RESTful Design sieht vor, dass eine GET-Anfrage an eine URL mit einer Ressourcen-ID diese spezifische Ressource ohne jegliche Seiteneffekte abruft. Eine Suche ist in der Regel eine Sammelanfrage, die Filterparameter verwendet und eine Liste von Ressourcen zur\'fcckgibt.\
\ls6\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Klarheit und Intuitivit\'e4t
\f0\b0 : Entwickler, die Ihre API nutzen, erwarten normalerweise, dass eine Anfrage an 
\f1\fs28 /posts/<id>
\f0\fs32  genau einen Post zur\'fcckgibt, nicht eine Liste von Posts. Das Mischen dieser Konzepte kann zu Verwirrung f\'fchren.\
\ls6\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Erweiterbarkeit und Wartbarkeit
\f0\b0 : Es ist einfacher, Endpunkte zu warten und zu erweitern, wenn sie klare und einzelne Verantwortlichkeiten haben. Wenn Sie sp\'e4ter \'c4nderungen an der Art und Weise vornehmen m\'fcssen, wie ID-basierte Abfragen gehandhabt werden, ist es einfacher, wenn diese Logik in einem separaten Endpunkt gekapselt ist.\
\ls6\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Sicherheit und Berechtigungen
\f0\b0 : Es ist m\'f6glich, dass verschiedene Endpunkte unterschiedliche Berechtigungen erfordern. Eine ID-basierte Abfrage k\'f6nnte strengere Berechtigungen ben\'f6tigen als eine allgemeine Suche, insbesondere wenn es um das Abfragen pers\'f6nlicher Daten geht.\
}